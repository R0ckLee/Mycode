1. mysql主从备份延迟以及实际相关问题
	原理	
	异步
	主库把写的的操作写进binlog
	并产生一个线程 用户给从库I/O线程读取binlog日志
	从库请求主库的binlog日志 并将日志写到自己的relayl og日志中
	从库线程会读取relay log日志的内容解析成具体sql语句并执行
	主库是并发的 从库的单线程却不是
	
	可能延迟的原因
	主库负载过高 从库负载过高 网络延迟 机器性能低 mysql配置问题
	
	主从同步延迟的产生
	主库并发较高是 产生的数量超过从库一个sql线程的承受范围
	
	解决延迟的方法
	简单的减少slave同步延时的方案就是在架构上做优化，尽量让主库的DDL快速执行。	还有就是主库是写，对数据安全性较高，比如 sync_binlog=1，	innodb_flush_log_at_trx_commit = 1 之类的设置，而slave则不需要这么高的	数据安全，完全可以讲sync_binlog设置为0或者关闭binlog，innodb_flushlog也 	可以设置为0来提高sql的执行效率。另外就是使用比主库更好的硬件设备作为slave。
	
	mysql的存储类型

	mysql数据库设计三范式：
	    1.什么是设计范式？
	        设计表的依据，按照这个三范式设计的表不会出现数据冗余
	    2.三范式都是哪些？
	        第一范式:任何一张表都应该有主键，并且每一个字段原子性不可再分。
		 
		 第二范式:建立在第一范式的基础上，所有非主键字段完全依赖，不能产生部分依赖。(产生部分依赖 会产生数据冗余 从而造成空间浪费)
		     口诀:多对多关系  三张表  关系表中有两个外键（第三张表为关系表 通过外键关联另外两个表 纯关系表）

		 第三范式:建立在第二范式的基础上，所有非主键字段直接依赖主键，不能产生传递依赖。
		     口诀:一对多关系 两张表  多的那个表加外键
               

                一对一怎么设计？ 
		      两种方案:
		      	 1.主键共享
		          例:一张登录表(只有用户名和密码) 一张详细信息表（详细信息表和登陆表主键共享 ）
		        2.外键唯一
		      	   例:一张登录表(只有用户名和密码) 一张详细信息表（详细信息表的外键加一个unique唯一约束）
					      
	    
	    提醒: 实际开发中 以满足客户需求为主 有的时候会拿冗余换执行速度
	


	数据库sql语句分类
	    DQL(数据库查询语言Query):凡是select语句都是DQL
	    DML(数据库操作语言 Mainpulation):insert、delete、update 对表中的数据进行增删改的操作是DML
	    DDL(数据定义语言 Definition):create、drop、alter 对表结构的增删改操作是DDL
	    TCL(事务控制语言): commit提交事务，rollback回滚事务
	    DCL(数据控制语言): Control):grant授权，revoke撤销权限等


	1、mysql 条件查询:

	    sql查询语句的执行顺序:
	        先执行 from 后面的 再执行 where后面的 再执行 select 最后执行order by
		 select
		     字段       5
		 from
		     表名       1
		 where
		     条件       2
		 group by
		     字段	 3
		 having
		     ….        4
		 order by
		     字段       6
		 limit
		     ….        7
	   

	    模糊查询 like 
		     %..%: 查询任意多个字符
		     _: 单个下划线 查询任意单个字符
	    

	    排序 order by
		 sleect 字段 from 表名 order by 字段;
	        select name, sal from temp order by sal; # 升序
	        select name, sal from temp order by sal asc; # 升序
	        select name, sal from temp order by desc; # 降序
	    按照工资的降序排列，当工资向同时再按照名字的升序排列（注:多字段排序时，前面的字段起主导作用，只有前面的字段相等无法排序的时候，才启用后面的字段进行排序）
	        select name, sal from temp order by sal desc, name asc;


	   
	    分组函数(多行处理函数)一共5个:
	    多行处理函数: 输入一行，输出多行
	    分组函数自动忽略null
	    分组函数不可直接使用在where语句中? 是因为group by是在where执行之后执行的
	    数据库中有null参与的数学运算结果都为null
	        count 计数	    select count(字段)/count(*) from 表;
		 sum	求和       select sum(字段) from 表;
		 avg	平均值	    select avg(字段) from 表;
		 max	最大值	    select max(字段) from 表;
		 min	最小值	    select min(字段) from 表;
		
	    单行处理函数:
	        输入一行，输出一行 输入多行，输出多行
	        ifnull()单行处理函数 
		 用法:ifnull(可能为null的数据，被当做什么处理) 例: ifnull(字段，0) ——> 把可能为null的字段 当做0处理


	    group by 和 having 搭档 having只是对分完组之后的数据进行过滤
	    分组函数一般和group by 联合使用 并且任何一个分组函数都是在group by语句执行之后才会执行，当一条sql语句没有group by的话，整张表的数据会自成一组
	    规则: 当一条sql中有group by的时候 select后面 只能跟参与分组的字段和分组函数 别的字段即使显示也没意义
	        group by : 按照某个字段或者某些字段进行分组
		 having : having是对分组之后的数据进行再次过滤


	    关于查询结果去重:
	       distinct 关键字去重 并且只能出现在所有字段的最前面 后面的字段联合去重
	       select distinct 字段名 from 表名;
		去重之后统计数量
		select count(distinct 字段名) from 表名;


	2、连接查询:
	     

	    什么是连接查询: 实际中 一般都是多张表联合查询

	    根据表的连接方式来划分:
	        内连接
		   等值连接
		   非等值连接
		   自连接

		 外连接
		   左外连接(左连接)
		   又外连接(右连接)
		 全连接
	    
	    笛卡尔积现象: 当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。

	    避免笛卡尔积现象？ 加条件进行过滤，虽然避免了笛卡尔积现象，但是不会减少匹配次数，只不过显示的是有效记录。

	    2.1、内连接之等值连接:最大特点是 条件是等量关系
	    例:查询每个员工的部门名称，要求显示员工名和部门名(员工名和部门名是两张表)
	    SQL92语法(已经不用了)
		select
		    e.ename,d.dname
		from
		    emp e,dept d
		where
		    e.deptno = d.deptno
	
	    SQL99语法(常用 结构更清晰 表的连接条件和where的过滤条件分离了)
		select
		    e.ename,d.dname                         ……
		from                                           A表 
		    emp e                      语法 ——>     join
              inner join(inner 可省略 表示内连接)              B表
		    dept d                                  on 
		on                                             连接条件
		    e.deptno = d.deptno                     where
                                                              ……


	    2.2、内连接之非等值关系:最大特点 条件关系是非等量关系
	    例:查询出每个员工的工资等级，要求显示员工名、工资、工资等级(工资和工资等级是两张表 工资等级表是一个范围区间)
	      
		select 
		    e.ename, e.sal, s.grade
		from
		    emp e
		inner join(inner 可省略)
		    salgrade s
		on
		    e.sal between s.losal and s.hisal;
	    

	    2.3、自连接:最大特点,一张表看成两张表 自己连接自己。
	    例:找出每个员工的上级领导，要求显示员工名和对应的领导名。(员工和上级领导是同一张表 领导既是员工也是员工的领导 可以当做两张表看 )
		
		员工表的领导编号 = 领导表的员工编号 
		select 
		    a.ename as ‘员工’, b,ename as ‘领导’
		from
		    emp a
		inner join
		    emp b
		on
		    a.mgr = b.empno    (a.mgr是a表中领导编号，b.empno是b表中员工编号 a和b是同一张表) 

		注: 查询出的结果少了一条，因为b表有一条数据为null 内连接是平等查询 所以会少一条记录 只查询出匹配上的记录

	
	    2.4、外连接 最主要特点:主表的数据无条件的全部查询出来
	        内连接:
		     假设A表和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的记录查询出来，这就是内连接，AB两张表没有主副之分，两张表是平等的。
		 外连接:
		     假设A表和B表进行连接，使用外连接的话，AB两张表中有一张表是主表，一张表是副表，主要查询主表中的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上的话，副表自动模拟出NULL与之匹配。

			
	
		 外连接分类:
		     左外连接(左连接):表示左边的表为主表
		     右外连接(右连接):表示右边的表为主表
		     左连接有右连接的写法，右连接也有对应左连接的写法。
		
		 
		 
		 上面内连接的例子:
		 使用外连接查询 员工表为主表 左外:
	        select 
		    a.ename as ‘员工’, b,ename as ‘领导’
		 from
		    emp a
		 left (outer可省略)join
		    emp b
		 on
		    a.mgr = b.empno;    (a.mgr是a表中领导编号，b.empno是b表中员工编号 a和b是同一张表) 
		

		 注: 所以查询出的结果为所有员工的记录 b表匹配不到的数据默认设为NULL
		 
		 改为右外连接查询就是把a b表调换位置 left join 换位right join

		 select 
		    a.ename as ‘员工’, b,ename as ‘领导’
		 from
		    emp b
		 right (outer可省略)join
		    emp a
		 on
		    a.mgr = b.empno;
		
	    2.5、全连接:
	 	      把左连接和右连接用 union 连接起来 得到全连接

	    2.6、三张表连接查询:
		  例: 找出每个员工的部门名称以及工资等级（涉及三张表）
			
		          select
			       e.ename,d.dname,s.grade
		  	   from
			       emp e
			   join
			       dept d
			   on
			       e.depton = d.depton
			   join
		              salgrade s
			   on
			       e.sal between s.losal and s.hisal;
		   
		   在加一个条件 找出每一个员工的名称、工资等级、以及上级领导(需要用外连接，因为有一个员工的上级领导为空 属于匹配记录不平等)
		   	   select
			       e.ename ‘员工’,d.dname,s.grade,e1.name ‘领导’
		  	   from
			       emp e
			   join
			       dept d
			   on
			       e.depton = d.depton
			   join
		              salgrade s
			   on
			       e.sal between s.losal and s.hisal
			   left join（因为e和e1相比e为主表 所以用左外连接 e和e1为同一张表属于自连接内容）
			       emp e1
			   on
			       e.mgr = e1.empno;

		   
			   
	     2.7、子查询
		   什么是子查询:select语句中嵌套select语句，被嵌套的select语句是子查询
		   子查询可以用在那里？
		   select (select) from (select) where (select)
		   例:找出高于平均薪资的员工信息
			where后面
		       select * from emp where sal > (select avg(sal) from emp);
  		   例:找出每个部门平均薪资的薪资等级
			from后面(常用 )
		      第一步:找出每个部门的平均薪水(解析:按照部门编号分组，求sal的平均值)
		          select depton,avg(sal) as avgsal from emp group by depton;
		      第二步:将以上的查询结果当做临时表t,让t表和salgrade薪资等级 s表连接，条件是 t.avgsal between s.losal and s.hisal
		      
		      select 
		          t.*,s.grade
		      from
		          (select depton,avg(sal) as avgsal from emp group by depton) t    #把第一步的sql语句当做临时表t
		      join
		          salgrade s
		      on
			   t.avgsal between s.losal and s.hisal
		       
	      
	     	   例:找出每个员工所在的部门名称，要求显示员工名和部门名。
		       select                                              select
		  	    e.ename,d.dname                     		       e.ename,						      
			from							       (seleclt d.dname from dept d where e.deptno = d.deptno) as dname															   from
			    emp e		        另一种写法(不常见)		emp e;
			join                         ———>                     
			    dept d
			on
			    e.depton = d.depton


	      3、union 可以将查询结果集相加 （相加必须是列数相同才可以）
		  例: 找出工位岗位是SALESMAN和MANAGEMAN的员工
		  第一种: select ename,job from emp where job = ‘SALESMAN’ or job = ‘MANAGERMAN’
		  第二种: select ename,job from emp where job in (‘SALESMAN’,‘MANAGERMAN’)

		  第三种: select ename,job from emp where job = ‘MANAGERMAN’
			  union
		  	  select ename,job from emp where job = ‘SALESMAN’

		

	      4、limit(重点 分页查询)
		  limit是mysql特有的没其他数据库没有，不通用
		  limit取结果集中的部分数据，这是它的作用
		  语法机制:
	  	      limit startIndex,length
		      startIndex表示起始位置,从0开始，0表示第一个
		      length表示取几个
		  例: 取出工资前5名的员工(降序取前5)
		      select ename,sal from emp order by sal desc limit 0, 5; 
		      select ename,sal from emp order by sal desc limit 5;  (0可以省略，第一个参数不写默认为0)

		  例: 取出工资排名在4到9名的员工
		      select ename,sal from emp order by sal desc limit 3, 6;


	       4.1、通用的标准分页sql
		    例: 每页显示3条记录
		    	 第1页:0, 3
			 第2页:3, 3
			 第3页:6, 3
			 第4页:9, 3
			 规律:（页码-1）* 每页条数，每页条数

		5、创建表:
		   建表语法格式:
		       create table 表名(
			    字段名1 数据类型，
			    字段名2 数据类型，
			    字段名3 数据类型，
			    …….
			);


		5.1、Mysql当中的字段的数据类型，常见的。
		     int           整数型
		     bigint	     长整型
		     float	     浮点型
		     char	     定长字符串
		     varchar	     可变长字符串
		     date	     日期类型
		     BLOB	     二进制大对象(图片，视屏等流媒体)
		     CLOB	     字符大对象(大文本，可以存几个G的字符串)

		     char和varchar怎么选择:
		         在实际开发中，某个字段的数据长度不发生改变的时候，是定长的，例如:性别、生日等都采用char
			  当一个字段的数据长度不确定，例如:简介、姓名等都采用varchar
		     图片或者视频不存在表中 表上只存一个链接
		     表名在数据库中一般以:t_或者tbl_开头


		     例:
		     创建学生表:
		         create t_student(
			      number bigint,
			      name varchar(255),
			      sex char(1),
			      classnu varchar(255),
			      birth char(10)

			  );

		 5.2、insert 语句插入数据 
			语法格式:
			    insert into 表名(字段1，字段2，字段3，….) values(值1，值2，值3，。。。)
			    字段可以省略 但是value的值的顺序 必须按照表的字段顺序来 并且值的数量不能省略和表的字段数量完全一致
			    要求: 字段的数量和值的数量相同，并且数据类型要对应相同。
			注意:当一条insert语句执行成功之后，表格当中必然会多一行记录，
		       即使多的这一行记录当中某系字段是NULL，后期也没有办法执行，只能通过update进行更新数据

			一次插入多行数据:
			insert into t_student(no,name,sex,classno,birth) values(….),(….)…;			



		5.3、表的复制:
		        语法:
		   	     create table 表名 as select语句；//将查询结果当做表创建出来
	       5.4、将查询结果当做数据插入到另一张表中
		         insert into 表名1 select * from 表名;（表结构需要对应一致）

		6、update 修改数据
		    update table set 字段名1=值1，字段2=值2..... where 条件;
		    注:不加条件整张表的数据全部更新


		7、删除数据:
		      语法格式:
		          delete from 表名 where 条件;
		  	注:没有条件全部删除
		       删除所有记录
			    delete from table;
		   删除大表(数据量很大非常大)(重点)
		   truncate table 表名; // 表被截断了，不可回滚，永久丢失
		   


		 7.1、删除表: 
		       drop table if exists t_student; // 如果这张表存在则删掉
			create table 表名; //新建表
			alter //改表结构
	
		 CRUD:增删改查
		 C: Create（增） R:Retrieve（检索） U:Update（修改） D:Delete（删除）			

		8、约束
		   什么是约束？
		       在创建表的时候，可以给表的字段添加响应的约束，添加约束的目的是为了保证表中数据的合法性、有效性、完整性


		   常见的约束有哪些？
		       非空约束(not null):约束的字段不能为NULL
		  	唯一约束(unique):约束的字段不能重复
			主键约束(primary key):约束的字段既不能为NULL，也不能重复(简称PK)
			外键约束(foreign key):。。。。(简称FK)
		       

		8.1、非空约束 not null
		     例:
		     drop table if exists 表名;
		     create table 表名(
			id int,
			username varchar(255) not null,
    			password varchar(255)

			);


		

		8.2、唯一性约束(unique)
		     唯一性约束装饰的字段具有唯一性，不能重复，但可以为NULL
		     例: 给某一个字段添加unique
		         drop user if exists 表名;
			  create table 表名(
			      id int,
			      username varchar(255) unique //列级约束
				);
		     
  		     例:给两个或多个字段添加unique （两个或多个字段联合起来唯一，对多列组合有效，单列无效） 
			  drop user if exists 表名;
			  create table 表名(
			      id int,
			      usercode varchar(255),
			      username varchar(255), 
			      unique(usercode,unsername) // 多个字段联合起来添加1个约束unique【表级约束】
				);

		      注:not null 只有列级约束 没有表级约束


		8.3、主键约束
		     语法:
		         drop table if exists 表名;
			  create table 表名(
			      id int primary key,  //列级约束
			      username varchar(255),
			      email varchar(255)
			  );
		     
		     id是主键，因为添加了主键约束，主键字段中的数据不能为NULL，也不能重复.
		     主键相关的术语:
		     主键约束 primary key
		     主键字段 id字段添加primary key之后，id叫做主键字段
		     主键值   id字段中的每一个值都是主键值

		     主键有什么作用:
		         表的设计三范式中，第一范式要求任何一张表都应该有主键
			  作用:主键值是这行记录在这张表当中的唯一标识(就像每个人的身份证一样)

		     主键分类:
		         根据主键字段的字段数量来划分:
			      单一主键(推荐的 常用的)
			      复合主键(多个字段联合起来添加一个主键约束)(复合主键不建议使用 违背了三范式)
			  根据主键性质划分:
			      自然主键
			      业务主键: 主键值和系统业务挂钩 例如:拿着银行卡号或身份证号作主键(不推荐)
			      最好不要拿着和业务挂钩的字段作为主键，因为业务一旦发生改变的时候，主键值可能也需要变化，但是有的时候没有办法变化，因为变化可能导致主键值重复
		     注:一张表的主键约束只能有一个

		     使用表级约束方式定义主键:
		         drop table if exists 表名;
			  create table 表名(
			      id int,
			      username varchar(255),
			      email varchar(255),
			      primary key(id)
			  );

		     mysql提供主键值自增:(重要)
		         drop table if exists 表名;
			  create table 表名(
			      id int primary key auto_increment, //id自增
			      username varchar(255)
				);
			  直接插入值不用给id id是自增的

		 8.4、外键约束
		      外键约束的术语:
		          外键约束: foreign key
			   外键字段: 添加有外键约束的字段
			   外键值: 外键字段中的每一个值



		      例: 学生表 和 班级表

			   顺序要求:
			       删除数据时，先删除子表，再删除父表
				添加数据时，先添加父表，再添加子表
				创建表时，先创建父表，再创建子表
				删除表时，先删除子表，再删除父表
		      
			   drop table if exists t_student;
			   drop table if exists t_class;
	
			   create table t_class(
			       cno int,
				cname varchar(255),
				primary key(cno)
				);

			   create table t_student(
			       sno int,
				classno int,
				sname varchar(255),
				primary key(sno),
				foreign key(classno) references t_class(cno)
				);

			   

		       外键值可以为NULL吗？
			    外键可以为NULL

			外键字段在引用其他表的某个字段的时候，被引用的字段必须是主键吗？
			    注: 被引用的字段不一定是主键，但至少具有unique约束。


		  9、存储引擎
			  create table 表名(
			      id int(20) not null auto_increment,
			      primary key(id)
				) engine=InnoDB default charset=utf8;
			
		         建表的时候可以指定存储引擎，也可以指定字符集
			  默认采用的存储引擎是InnoDB方式
			  默认采用字符集是UTF8

		     查看当前mysql支持的存储引擎: show engines \G;


		  9.1 常见的存储引擎:
		       Engine: MyISAM
     			Support: YES
     			Comment: MyISAM storage engine
			Transactions: NO
          		XA: NO
  			Savepoints: NO
			
		       MyISAM这种引擎不支持事务 是mysql最常用的
			特征:
			    使用三个文件表示每个表
			        格式文件 -  存储表结构(mytable.frm)
				 数据文件 -  存储表数据(mytable.MYD)
				 索引文件 -  存储表上的索引(mytable.MYI)


			优点:可被压缩，节省存储空间 并且可以转换为只读表，提高检索效率
		 	缺点: 不支持事务
			————————————————————————————————————————————————————————————————————
			Engine: InnoDB
     			Support: DEFAULT
     			Comment: Supports transactions, row-level locking, and foreign keys
			Transactions: YES
          		XA: YES
  			Savepoints: YES

			Mysql默认的引擎

			优点: 支持事务、行级锁、外键等，这种存储引擎数据的安全得到保障
			特征:
			    表的结构存储在.frm格式的文件中
			    表的数据存储在tablespace（逻辑空间）无法被压缩，无法转换只读
			    提供一组用来记录事务性活动的日志文件
			    这种InnoDB存储引擎在Mysql数据库崩溃之后提供自动恢复机制
			    InnoDB支持级联删除和级联更新
			    支出事务处理 提交 回滚等
			    
 			—————————————————————————————————————————————————————————————————————

			Engine: MEMORY
     			Support: YES
     			Comment: Hash based, stored in memory, useful for temporary tables
			Transactions: NO
         		XA: NO
  			Savepoints: NO
			
			优点:查询速度最快
			
			缺点:不支持事务，数据容易丢失，数据都存储在内存当中
	
			特征:
			    表结构存储在.frm格式的文件中
			    表数据及索引存储在内存当中
			    表级锁机制
			    不能存储大文件或二进制文件BLOB字段


			练习:取得每个部门最高薪水的人员名称
			     第一步:取得每个部门的最高薪水
			         select deptno,max(sal) as maxsal from emp group by deptno;
			     第二步:
				  将以上的结果当做临时表他，t表和emp表 e进行连接，条件是: t.deptno = e.deptno and t.maxsal = e.sal
				  select
				      e.ename,t.*
				  from
				      (select deptno,max(sal) as maxsal from emp group by deptno) t
				  join
				      emp e
				  on
				      t.deptno = e.deptno and t.maxsal = e.sal



		    10、事务（Transaction）
			 什么是事务？
			     一个事务是一个完整的业务逻辑单元，不可再分。
			 比如: 银行账户转账，从A账户向B账户转账，需要执行两条update语句
			 以上两条语句必须同时成功，或者同时失败，不允许出现一条成功，一条失败
			 要想保证以上两条DML语句同时成功或同时失败，那么就需要使用数据库的事务机制

		    10.1、和事务相关的语句只有:DML语句 (insert delete update)
			  为什么？
			      因为他们三个语句都是和数据库表中的数据相关的 事务的存在就是为了保证数据的完整性，安全性。
		
		    10.2、假如所有业务都能使用1条DML语句搞定，就不需要事务机制了，但实际情况不是这样的，通常一个事(业务)需要多条DML语句共同联合完成

		    10.3、 理解事务的原理:
			    第一步: 开启事务机制(开始)
			    第二步: 执行多条DML语句 并把执行记录到数据库的操作历史或缓存中，并不会向文件中保存数据，不会真正的修改硬盘上的数据
			    第三步: 提交或者回滚事务commit/rollback（结束）
			    提交之后表示事务结束把历史操作同步到硬盘文件当中，当硬盘文件发生改变是，历史操作记录缓存就会被清空
			    回滚事务表示事务结束，也会清空历史操作记录，但是不会更改硬盘文件
			   
			    执行DML
			    ……
			    savepoint A1; //此位置保存一个节点 后续可以恢复到此处
			    后续回滚可以直接rollback A1;
					

		    	   事务的特性:
			       事务包括四大特性: ACID
				A: 原子性: 事务是最小的工作单元，不可再分
		    		C: 一致性: 事务必须保证多条DML语句同时成功或者同时失败
				I: 隔离性: 事务A与事务B之间具有隔离性
				D: 持久性: 持久性说的是最终数据必须持久到硬盘文件中，事务才算成功的结束


		     10.4、关于事务之间的隔离性
			    事务隔离性存在隔离级别，理论上隔离级别包括4个:
			           
			    第一级别:
			        读未提交
			        对方事务还没提交，我们当前事务就可以读取到对方未提交的数据 也叫做脏读
			    第二级别:
				 读已提交
				 对方事务提交之后的数据我方可以读取到
			   	 这种隔离级别解决了脏读。 但是存在的问题是不可重复读问题
			    第三级别:
			 	 可重复读
				 这种隔离级别解决了 不可重复读问题。 但是存在的问题是读取到的数据是幻象
			    第四级别:
				 序列化读/串行化读
				 解决了所有问题。 但是效率低 需要事务排队

			    oracle数据库默认的隔离级别是:第二级别
			    mysql数据路默认的隔离级别是:第三级别

		      11、索引
			       11.1、什么是索引? 有什么用？
				    索引就相当于一本书的目录，通过目录可以快速的找到相应的资源，
				    在数据库方面，查询一张表的时候有两种检索方式:
				       第一种:全表扫描
					第二种:根据索引检索(效率很高)
				
				索引为什么可以提高检索效率？
				    其实最根本的原理就是缩小了扫描的范围

				索引虽然可以提高检索效率，但是不能随意添加索引，因为索引也是数据库当中的对象，
				也需要数据库不断的维护，是有维护成本的。比如，表中的数据经常被修改这样就不适合添加索引，
				因为数据一旦修改，索引需要重新排序，进行维护。

				添加索引是给某一个字段，或者某些字段添加索引。

				例:
				    select ename,sal from emp where ename = ‘SMITH’;
				    当ename字段上没有添加索引的时候，以上sql语句会进行全表扫描，扫描ename字段中所有的值。
			 	    当ename字段上添加索引的时候,以上sql会根据索引扫描，快速定位。

				11.2、怎么创建索引对象？ 怎么删除索引对象？
				    创建索引对象:
				        create index 索引名 on 表名(字段名)；
				    删除索引对象:
					 drop index 索引名 on 表名;
  					
				11.3、什么时候考虑给字段添加索引？（满足什么条件）
				      * 数据量庞大（根据具体业务需求和线上环境决定）
				      * 该字段很少使用DML操作。（因为字段进行操作修改，索引也需要维护）
				      * 该字段经常出现在where语句中（经常根据某个字段查询）

				11.4、 注意:主键和具有unique约束的字段会自动添加索引。
					所以根据主键查询效率较高，尽量根据主键检索。

				11.5、查看sql语句的执行计划:
					explain 加要执行的语句
					查看结果中type字段显示的all还是根据索引查询的 或者根据字段rows显示的行数 来判断查询该字段是根据索引检索




				11.6、索引的底层采用的数据结构 B+tree

				      索引的底层原理:
				          通过B Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的物理地址，
				      	   最终通过索引检索到数据之后，获取到相关的物理地址，通过物理地址定位表中的数据，效率是最高的。
				      
  				      select ename from emp where ename = ’SMITH’;
				      通过索引转换为:
				      select ename from emp where 物理地址 = 0x3;（举例）

	
				11.7、索引的分类？
				      单一索引:给单个字段添加索引
				      复合索引:给的多个字段联合添加1个索引
				      主键索引:主键上会自动添加索引
				      唯一索引:有unique约束的字段上会自动添加索引

				11.8、索引什么时候会失效？
				      select ename from emp where ename like ‘%A%’;
				      模糊查询的时候，第一个通配符使用的是%,这个时候索引是失效的，因为匹配不到第一个字符
				      第一个字符不是通配符的时候，是走索引的。			          


			  12、视图（view）
			
			      12.1、什么是视图？
				     视图是一种根据查询（select）定义的数据库对象，用于获取想要看到和使用的局部数据
				     站在不同角度去看待数据，（同一张表的数据，通过不同角度去看待）
			
			      12.2、视图的作用:
				     隐藏表的实现细节 - 面向视图检索
				     保密级别较高的系统，数据库只对外提供相关的视图
				
			      12.3、创建视图？删除视图？
				     create view myview(视图名称) as select 字段名 from 表名;
				     drop view myview;(只删除了视图的定义，不会影响数据)

  				     注:只有DQL(select)语句才能以视图对象的方式创建出来				     
   
	
			      12.4、对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作原表的）
				     可以对视图进行CRUD操作。

			   13、DBA命令
				13.1、新建用户
				      create user 用户名 indentified by ‘password’;

				      修改用户密码:
					use mysql;
				       update user set password = password(‘密码’) where user = ‘用户名’;
					或
					set password for 用户名@localhost = password('新密码'); 

				       mysql修改登录密码编辑/etc/my.cnf
					    [mysqld]
					    skip-grant-tables —->跳过权限验证直接登录
					    修改root密码 先刷新权限相关的表 flush privileges;
					    set password for root@localhost = password(‘123456’);
					    或者
					    use mysql; update user set password=PASSWORD(‘123456’)WHERE user=’root’; 
					    再刷新 flush privileges;
					    最后在注释掉
	 				    [mysqld]
					    #skip-grant-tables
					    重启mysql服务

	
				13.2、授权
				      grant all privileges on dbname.tbname to ‘用户名’@‘login ip’ identified by ‘password’ with grant option;
				      flush privileges;
					1)dbname = * 表示所有数据库
					2)tbname = * 表示所有表
					3)login ip = * 表示任何ip
					4)password为空， 表示不需要密码
					5)with grant option， 表示该用户还可以给其他用户授权
					 
					privileges 包括:
					    alter：修改数据库的表
					    create：创建新的数据库或表
					    delete：删除表数据
					    drop：删除库或表
					    index：创建或删除索引
					    insert：添加表的数据
					    update：更新表的数据
					    select：查询表的数据
					    all：允许任何操作
					    usage：只允许登录
				13.3、回收授权
				      revoke all privileges on *.* from 表名;
				      flush privileges;

				13.4、数据导入导出
				     mysql备份		
	   			         mysqldump -uroot -p123456 -A(—all-databases) > 1.sql #备份所有数据库的数据和结构
	   				  mysqldump -uroot -p123456 -A(—all-databases) -d > 2.sql #备份所有数据库的结构
  	   				  mysqldump -uroot -p123456 -A(—all-databases) -t > 3.sql #备份所有数据库的数据
	   				  mysqldump -uroot -p123456 dbname > 4.sql #备份单个数据库的数据和结构
  	   				  mysqldump -uroot -p123456 dbname table1 table2 > 5.sql #备份单个数据库的多个表数据和结构
	   				  mysqldump -uroot -p123456 -B(—databases) db1 db2 > 6.sql #备份多个数据库
				      
				     mysql还原
					  先create database 要导入的数据库名;
					  use 要导入的数据库名;
	   				  mysql -uroot -p123456  db_name < /home/1.sql #home为sql文件的保存路径
	 				  或
          				  登陆mysql命令行执行 source /home/1.sql #home为sql文件的保存路径
		
       			     另一种备份与还原
	   				  test文本备份 select * from student into outfile '/var/lib/mysql-files/tt.txt';  还原 load data infile '/var/lib/mysql-files/tt.txt' into table student;



























			      
				























