版本控制工具h优点:
协同修改
数据备份
版本管理
权限控制
历史记录
分支管理


集中式版本控制
系统宕机历史记录就没了-单点故障藏（svn）

分布式版本控制
本地就有历史版本（git）


git优势:
大部门在本地开发完成不需要连网
完整性保存
尽可能添加数据而不是删除或者修改数据
分支操作很快流畅（内部快照的管理）
与linux命令兼容


git 结构:
工作区
  |
git add
暂存区
  |
Git commit

本地库
  |
git remote add origin + 远程仓库地址
   |
git remote -v 检查当前远程库的别名
   |
git push origin master



git和github代码托管中心

代码托管中心:维护远程库

局域网:
Gitlab

外网:
Github


Git命令行操作:
新建仓库
git init #初始化

git  status # 获取状态

git add 
 
git rm - -cached # 在commit之前撤销git add操作
git reset head #好像比上面git rm --cached更方便

git commit -m ‘描述信息’ #提交

git commit -am # 如果某个文件已经被仓库管理，如果再更改此文件，直接需要一条命令提交即可（相当于先add再commit）

git remote add origin +git远程仓库地址 #添加源

git push origin master # 推送远程仓库



git log # 查看提交记录

git log —-oneline —decorate# 查看当前指针指向,简化显示

git log -1 -p #查看最近一条，详细的改动

git reflog 显示指针HEAD@{当前版本需要多少步}显示所有提交的版本包括回滚的

git reset —hard +git log中的唯一哈希值 回滚到指定版本



基于索引值操作后退和前进版本

git reset —-hard + 索引值（git reflog 前面显示的hash值）

reset 命令三个参数
—-soft 仅仅在本地库移动HEAD指针
—-mixed 在本地库移动HEAD指针、重置暂存区
—-hard 在本地库移动HEAD指针、重置暂存区、重置工作区

已经提交的文件 删除找回
退回上一个提交的版本


文件比较
git diff


Git 分支:
创建新分支的好处
同时并行开发 提高效率
各个分支在开发过程中 某个分支失败不会对其他分支影响 删除开始即可
git branch -v 查看分支
git branch 创建分支
git checkout + 分支名 切换分支
git checkout -b +分支名 #创建并切换到分支
git branch -d +分支名 #删除分支（在master上执行）

合并操作:
分支合并master 
先切换到接受修改的分支上（被合并，添加新内容）上 git checkout + 被合并
再执行merge命令 + 分支名字 git merge + 分支名
在master上执行命令 git merge +分支名

合并时产生冲突:
先编辑文件删除特殊符号修改
再修改文件内容
git add + 文件名
git commit -m ‘合并’ #此时commit不能带文件名



打标签:

git tag -a v1.0 -m ’描述信息‘
git show v1.0 #查看v1.0信息
git reset —-hard v1.0 #直接还原数据到v1.0
git tag -d v1.0 #删除标签

拉取pull：

pull = fetch + merge

git fetch + 远程库地址别名 + 远程分支名

git merge + 远程库地址别名/远程分支名


解决冲突：
如果不是基于gtihub远程库上最新版所做的修改，不能推送，必须先拉取
拉取后进入冲突状态 按照上面分支冲突的解决办法操作

修改同一个文件同一个位置产生冲突 修改后再提交是不需要指定文件名




团队外合作的情况:

先fork一份
修改后提交自己的远程库
然后Pull request —> New pull request —> create pull request









假设项目上有一个分支test，使用git branch -a看不到该远程分支，直接使用命令git checkout test报错如下：

error: pathspec 'origin/test' did not match any file(s) known to git.
解决方法： 
1、执行命令git fetch取回所有分支的更新

2、执行git branch -a可以看到test分支（已经更新分支信息）

3、切换分支git checkout test
















   




